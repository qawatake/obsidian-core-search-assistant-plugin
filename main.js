/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  default: () => CoreSearchAssistantPlugin
});

// src/components/CardView.ts
var import_obsidian3 = __toModule(require("obsidian"));

// src/Setting.ts
var import_obsidian = __toModule(require("obsidian"));
var AVAILABLE_OUTLINE_WIDTHS = [0, 3, 5, 7, 10];
var AUTO_PREVIEW_MODE_IDS = ["none", "singleView", "cardView"];
var autoPreviewModeInfos = {
  none: "none",
  singleView: "single view",
  cardView: "card view"
};
var AVAILABLE_CARD_LAYOUT = ["2x2", "2x3", "3x2", "3x3"];
var DEFAULT_SETTINGS = {
  keepSelectedItemsCentered: false,
  outlineWidth: 5,
  autoPreviewMode: "cardView",
  cardViewLayout: "2x3",
  splitDirection: "horizontal",
  hideIframe: false
};
var CoreSearchAssistantSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Keep selected item centered").addToggle((component) => {
      var _a, _b;
      component.setValue((_b = (_a = this.plugin.settings) == null ? void 0 : _a.keepSelectedItemsCentered) != null ? _b : DEFAULT_SETTINGS.keepSelectedItemsCentered).onChange((value) => {
        if (!this.plugin.settings) {
          return;
        }
        this.plugin.settings.keepSelectedItemsCentered = value;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Outline width (px)").setDesc("An outline appears when you enter search mode.").addDropdown((component) => {
      var _a;
      AVAILABLE_OUTLINE_WIDTHS.forEach((width) => {
        const text = width.toString();
        component.addOption(text, text);
      });
      component.setValue(validOutlineWidth((_a = this.plugin.settings) == null ? void 0 : _a.outlineWidth).toString()).onChange((value) => {
        const width = Number.parseInt(value);
        if (!this.plugin.settings) {
          return;
        }
        if (!AVAILABLE_OUTLINE_WIDTHS.includes(width)) {
          return;
        }
        this.plugin.settings.outlineWidth = width;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Auto preview mode").addDropdown((component) => {
      var _a, _b;
      component.addOptions(autoPreviewModeInfos).setValue((_b = (_a = this.plugin.settings) == null ? void 0 : _a.autoPreviewMode) != null ? _b : "cardView").onChange((id) => {
        if (!this.plugin.settings) {
          return;
        }
        if (!AUTO_PREVIEW_MODE_IDS.includes(id)) {
          return;
        }
        this.plugin.settings.autoPreviewMode = id;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Default layout of card view").addDropdown((component) => {
      var _a, _b;
      AVAILABLE_CARD_LAYOUT.forEach((layout) => {
        component.addOption(layout, layout);
      });
      component.setValue((_b = (_a = this.plugin.settings) == null ? void 0 : _a.cardViewLayout) != null ? _b : DEFAULT_SETTINGS.cardViewLayout).onChange((value) => {
        if (!this.plugin.settings) {
          return;
        }
        if (!AVAILABLE_CARD_LAYOUT.includes(value)) {
          return;
        }
        this.plugin.settings.cardViewLayout = value;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Default split direction").setDesc("This applies when you open a file in a new pane").addDropdown((component) => {
      if (!this.plugin.settings) {
        return;
      }
      component.addOptions({
        horizontal: "horizontal",
        vertical: "vertical"
      }).setValue(this.plugin.settings.splitDirection).onChange((direction) => __async(this, null, function* () {
        if (!this.plugin.settings) {
          return;
        }
        if (direction == "horizontal" || direction == "vertical") {
          this.plugin.settings.splitDirection = direction;
          yield this.plugin.saveSettings();
        }
      }));
    });
    new import_obsidian.Setting(containerEl).setName("Hide iframe from auto preview").setDesc("Some iframe elements prevent the keyboard operation.").addToggle((component) => {
      if (!this.plugin.settings) {
        return;
      }
      component.setValue(this.plugin.settings.hideIframe).onChange((value) => {
        if (!this.plugin.settings) {
          return;
        }
        this.plugin.settings.hideIframe = value;
        this.plugin.saveSettings();
      });
    });
  }
};
function validOutlineWidth(width) {
  if (typeof width !== "number") {
    return DEFAULT_SETTINGS.outlineWidth;
  }
  if (!Number.isInteger(width)) {
    return DEFAULT_SETTINGS.outlineWidth;
  }
  if (!AVAILABLE_OUTLINE_WIDTHS.includes(width)) {
    return DEFAULT_SETTINGS.outlineWidth;
  }
  return width;
}
function parseCardLayout(layout) {
  const [row, column] = layout.split("x");
  return [Number.parseInt(row != null ? row : "0"), Number.parseInt(column != null ? column : "0")];
}

// src/components/WorkspacePreview.ts
var import_obsidian2 = __toModule(require("obsidian"));
var INTERVAL_MILLISECOND_TO_BE_DETACHED = 1e3;
var WorkspacePreview = class extends import_obsidian2.Component {
  constructor(app, plugin) {
    super();
    this.app = app;
    this.plugin = plugin;
    this.containerEl = createEl("div", {
      attr: {
        id: "core-search-assistant_workspace-preview"
      }
    });
    this.hide();
    this.app.workspace.onLayoutReady(() => {
      this.app.workspace.rootSplit.containerEl.appendChild(this.containerEl);
    });
  }
  onload() {
    console.log("[Core Search Assistant] Workspace preview loaded");
  }
  onunload() {
    var _a;
    (_a = this.leaf) == null ? void 0 : _a.detach();
    this.containerEl.empty();
    this.containerEl.remove();
  }
  renew(file) {
    this.detachLater(INTERVAL_MILLISECOND_TO_BE_DETACHED);
    this.show(file);
  }
  hide() {
    this.detachLater(INTERVAL_MILLISECOND_TO_BE_DETACHED);
    this.containerEl.hide();
  }
  show(file) {
    var _a;
    this.leaf = new import_obsidian2.WorkspaceLeaf(this.app);
    this.leaf.openFile(file, { state: { mode: "preview" } });
    this.containerEl.empty();
    this.containerEl.appendChild(this.leaf.containerEl);
    if ((_a = this.plugin.settings) == null ? void 0 : _a.hideIframe) {
      this.containerEl.addClass("hide-iframe");
    }
    this.containerEl.show();
  }
  detachLater(millisecond) {
    if (!this.leaf) {
      return;
    }
    const leafToBeDetached = this.leaf;
    setTimeout(() => {
      leafToBeDetached.detach();
    }, millisecond);
  }
};

// src/components/CardView.ts
var CardView = class extends import_obsidian3.Component {
  constructor(app, plugin) {
    super();
    this.app = app;
    this.plugin = plugin;
    this.leafs = [];
    this.workspaceCoverEl = createEl("div", {
      attr: { id: `core-search-assistant_card-view` }
    });
    this.displayed = false;
    let row = 0;
    let column = 0;
    if (this.plugin.settings) {
      [row, column] = parseCardLayout(this.plugin.settings.cardViewLayout);
    }
    this.contentEl = this.workspaceCoverEl.createEl("div", {
      cls: "content"
    });
    this.contentEl.style.gridTemplateColumns = `repeat(${column}, minmax(0, 1fr))`;
    this.contentEl.style.gridTemplateRows = `repeat(${row}, 1fr)`;
    this.app.workspace.onLayoutReady(() => {
      this.app.workspace.rootSplit.containerEl.appendChild(this.workspaceCoverEl);
      this.hide();
    });
  }
  onload() {
    this.registerDomEvent(this.contentEl, "click", (evt) => {
      var _a;
      if (!this.displayed) {
        return;
      }
      if (!(evt.target instanceof HTMLElement)) {
        return;
      }
      const cardEl = this.getSelectedCardEl(evt.target);
      if (!cardEl) {
        return;
      }
      const id = cardEl.dataset["id"];
      if (id === void 0) {
        return;
      }
      (_a = this.plugin.SearchComponentInterface) == null ? void 0 : _a.open(Number.parseInt(id));
    });
    console.log("[Core Search Assistant] CardView loaded");
  }
  unload() {
    this.leafs.forEach((leaf) => {
      leaf.detach();
    });
    this.leafs = [];
    this.workspaceCoverEl.empty();
    this.workspaceCoverEl.remove();
  }
  renderItem(item, id) {
    const previewContainerEl = this.createPreviewContainerEl(item, id);
    const leaf = new import_obsidian3.WorkspaceLeaf(this.app);
    leaf.openFile(item.file, { state: { mode: "preview" } });
    previewContainerEl.appendChild(leaf.containerEl);
    this.leafs.push(leaf);
  }
  focusOn(pos) {
    const { contentEl } = this;
    const cardEls = contentEl.childNodes;
    [-1, 0, 1].forEach((i) => {
      const el = cardEls.item(pos + i);
      if (!(el instanceof HTMLElement)) {
        return;
      }
      if (i === 0) {
        el.addClass("is-selected");
      } else {
        el.removeClass("is-selected");
      }
    });
  }
  unfocus() {
    const { contentEl } = this;
    const cardEls = contentEl.childNodes;
    cardEls.forEach((el) => {
      if (!(el instanceof HTMLElement)) {
        return;
      }
      el.removeClass("is-selected");
    });
  }
  hide() {
    this.detachLeafsLater();
    this.workspaceCoverEl.toggleVisibility(false);
    this.contentEl.empty();
    this.displayed = false;
  }
  renderPage(itemId) {
    var _a;
    const cardsPerPage = this.cardsPerPage();
    if (cardsPerPage === void 0) {
      return;
    }
    const pageId = Math.floor(itemId / cardsPerPage);
    const items = (_a = this.plugin.SearchComponentInterface) == null ? void 0 : _a.getResultItems();
    if (!items) {
      return;
    }
    for (let i = pageId * cardsPerPage; i < (pageId + 1) * cardsPerPage; i++) {
      const item = items[i];
      if (!item) {
        continue;
      }
      this.renderItem(item, i);
    }
    this.setLayout();
  }
  reveal() {
    this.workspaceCoverEl.toggleVisibility(true);
    this.displayed = true;
  }
  setLayout() {
    if (!this.plugin.settings) {
      return;
    }
    const [row, column] = parseCardLayout(this.plugin.settings.cardViewLayout);
    this.contentEl.style.gridTemplateColumns = `repeat(${column}, minmax(0, 1fr))`;
    this.contentEl.style.gridTemplateRows = `repeat(${row}, 1fr)`;
  }
  detachLeafsLater() {
    const leafsToBeDetached = this.leafs;
    this.leafs = [];
    setTimeout(() => {
      leafsToBeDetached.forEach((leaf) => {
        leaf.detach();
      });
    }, INTERVAL_MILLISECOND_TO_BE_DETACHED);
  }
  createPreviewContainerEl(item, id) {
    var _a;
    const { contentEl } = this;
    const itemContainerEl = contentEl.createEl("div", {
      cls: "item-container",
      attr: {
        "data-id": id,
        "data-path": item.file.path
      }
    });
    itemContainerEl.createEl("div", {
      cls: "file-name-container",
      text: item.file.basename
    });
    const previewMarginEl = itemContainerEl.createEl("div", {
      cls: "preview-container-wrapper"
    });
    const previewContainerEl = previewMarginEl.createEl("div", {
      cls: "preview-container"
    });
    if ((_a = this.plugin.settings) == null ? void 0 : _a.hideIframe) {
      previewContainerEl.addClass("hide-iframe");
    }
    return previewContainerEl;
  }
  getSelectedCardEl(el) {
    const parentEl = el.parentElement;
    if (el.tagName === "DIV" && parentEl === this.contentEl) {
      return el;
    }
    if (parentEl === null) {
      return void 0;
    }
    return this.getSelectedCardEl(parentEl);
  }
  itemsRenderedCorrectly() {
    var _a;
    const wantedItems = (_a = this.plugin.SearchComponentInterface) == null ? void 0 : _a.getResultItems();
    if (wantedItems === void 0) {
      return false;
    }
    const cardsPerPage = this.cardsPerPage();
    if (cardsPerPage === void 0) {
      return false;
    }
    const length = Math.min(wantedItems.length, cardsPerPage);
    const gotItemEls = this.contentEl.children;
    for (let i = 0; i < length; i++) {
      const want = wantedItems[i];
      const got = gotItemEls.item(i);
      if (want === void 0) {
        if (got === null) {
          continue;
        } else {
          return false;
        }
      }
      if (!(got instanceof HTMLElement)) {
        return false;
      }
      if (got.dataset["path"] !== want.file.path) {
        return false;
      }
    }
    return true;
  }
  cardsPerPage() {
    if (!this.plugin.settings) {
      return void 0;
    }
    const [row, column] = parseCardLayout(this.plugin.settings.cardViewLayout);
    return row * column;
  }
};

// src/Events.ts
var import_obsidian4 = __toModule(require("obsidian"));
var EVENT_SEARCH_RESULT_ITEM_DETECTED = "search-result-item-detected";
var CoreSearchAssistantEvents = class extends import_obsidian4.Events {
  trigger(name, ...data) {
    super.trigger(name, ...data);
  }
  on(name, callback, ctx) {
    return super.on(name, callback, ctx);
  }
};

// src/Controller.ts
var import_obsidian7 = __toModule(require("obsidian"));

// src/components/OptionModal.ts
var import_obsidian5 = __toModule(require("obsidian"));

// src/types/Option.ts
var searchOptions = {
  matchingCase: {
    iconId: "uppercase-lowercase-a",
    description: "Toggle matching case"
  },
  explainSearch: {
    iconId: "info",
    description: "Toggle explanation of search term"
  },
  collapseAll: {
    iconId: "bullet-list",
    description: "Toggle collapsing results"
  },
  extraContext: {
    iconId: "expand-vertically",
    description: "Toggle showing more context"
  },
  alphabetical: {
    iconId: "down-arrow-with-tail",
    description: "Sort by file name (A \u2192 Z)"
  },
  alphabeticalReverse: {
    iconId: "up-arrow-with-tail",
    description: "Sort by file name (Z \u2192 A)"
  },
  byModifiedTime: {
    iconId: "down-arrow-with-tail",
    description: "Sort by modified time (new \u2192 old)"
  },
  byModifiedTimeReverse: {
    iconId: "up-arrow-with-tail",
    description: "Sort by modified time (old \u2192 new)"
  },
  byCreatedTime: {
    iconId: "down-arrow-with-tail",
    description: "Sort by created time (new \u2192 old)"
  },
  byCreatedTimeReverse: {
    iconId: "up-arrow-with-tail",
    description: "Sort by created time (old \u2192 new)"
  }
};

// src/components/OptionModal.ts
var OptionModal = class extends import_obsidian5.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
    this.items = [
      {
        id: "matchingCase",
        key: "a",
        onChoose: () => {
          var _a, _b;
          (_a = this.plugin.SearchComponentInterface) == null ? void 0 : _a.toggleMatchingCase();
          (_b = this.plugin.controller) == null ? void 0 : _b.reset();
        }
      },
      {
        id: "explainSearch",
        key: "s",
        onChoose: () => {
          var _a;
          (_a = this.plugin.SearchComponentInterface) == null ? void 0 : _a.toggleExplainSearch();
        }
      },
      {
        id: "collapseAll",
        key: "d",
        onChoose: () => {
          var _a;
          (_a = this.plugin.SearchComponentInterface) == null ? void 0 : _a.toggleCollapseAll();
        }
      },
      {
        id: "extraContext",
        key: "f",
        onChoose: () => {
          var _a;
          (_a = this.plugin.SearchComponentInterface) == null ? void 0 : _a.toggleExtraContext();
        }
      },
      {
        id: "alphabetical",
        key: "g",
        onChoose: () => {
          var _a, _b, _c;
          const changed = (_a = this.plugin.SearchComponentInterface) == null ? void 0 : _a.setSortOrder("alphabetical");
          if (changed) {
            (_b = this.plugin.SearchComponentInterface) == null ? void 0 : _b.renewSortOrderInfo();
            (_c = this.plugin.controller) == null ? void 0 : _c.reset();
          }
        }
      },
      {
        id: "alphabeticalReverse",
        key: "h",
        onChoose: () => {
          var _a, _b, _c;
          const changed = (_a = this.plugin.SearchComponentInterface) == null ? void 0 : _a.setSortOrder("alphabeticalReverse");
          if (changed) {
            (_b = this.plugin.SearchComponentInterface) == null ? void 0 : _b.renewSortOrderInfo();
            (_c = this.plugin.controller) == null ? void 0 : _c.reset();
          }
        }
      },
      {
        id: "byModifiedTime",
        key: "j",
        onChoose: () => {
          var _a, _b, _c;
          const changed = (_a = this.plugin.SearchComponentInterface) == null ? void 0 : _a.setSortOrder("byModifiedTime");
          if (changed) {
            (_b = this.plugin.SearchComponentInterface) == null ? void 0 : _b.renewSortOrderInfo();
            (_c = this.plugin.controller) == null ? void 0 : _c.reset();
          }
        }
      },
      {
        id: "byModifiedTimeReverse",
        key: "k",
        onChoose: () => {
          var _a, _b, _c;
          const changed = (_a = this.plugin.SearchComponentInterface) == null ? void 0 : _a.setSortOrder("byModifiedTimeReverse");
          if (changed) {
            (_b = this.plugin.SearchComponentInterface) == null ? void 0 : _b.renewSortOrderInfo();
            (_c = this.plugin.controller) == null ? void 0 : _c.reset();
          }
        }
      },
      {
        id: "byCreatedTime",
        key: "l",
        onChoose: () => {
          var _a, _b, _c;
          const changed = (_a = this.plugin.SearchComponentInterface) == null ? void 0 : _a.setSortOrder("byCreatedTime");
          if (changed) {
            (_b = this.plugin.SearchComponentInterface) == null ? void 0 : _b.renewSortOrderInfo();
            (_c = this.plugin.controller) == null ? void 0 : _c.reset();
          }
        }
      },
      {
        id: "byCreatedTimeReverse",
        key: ";",
        onChoose: () => {
          var _a, _b, _c;
          const changed = (_a = this.plugin.SearchComponentInterface) == null ? void 0 : _a.setSortOrder("byCreatedTimeReverse");
          if (changed) {
            (_b = this.plugin.SearchComponentInterface) == null ? void 0 : _b.renewSortOrderInfo();
            (_c = this.plugin.controller) == null ? void 0 : _c.reset();
          }
        }
      }
    ];
  }
  onOpen() {
    var _a;
    this.items.forEach((item) => {
      this.scope.register([], item.key, item.onChoose);
    });
    this.renderOptions();
    (_a = this.plugin.controller) == null ? void 0 : _a.toggleOptionModalShown(true);
  }
  renderOptions() {
    const { contentEl } = this;
    contentEl.empty();
    this.containerEl.addClass("core-search-assistant_option-modal");
    this.items.forEach((item) => {
      const entryEl = contentEl.createEl("div", {
        cls: "suggestion-item"
      });
      const iconEl = entryEl.createEl("span", {
        cls: "suggestion-icon"
      });
      (0, import_obsidian5.setIcon)(iconEl, searchOptions[item.id].iconId);
      entryEl.createEl("span", {
        text: searchOptions[item.id].description,
        cls: "suggestion-content"
      });
      entryEl.createEl("kbd", {
        text: item.key.toUpperCase(),
        cls: "suggestion-hotkey"
      });
    });
  }
  onClose() {
    const { containerEl } = this;
    containerEl.empty();
    setTimeout(() => {
      var _a;
      return (_a = this.plugin.controller) == null ? void 0 : _a.toggleOptionModalShown(false);
    }, 100);
  }
};

// src/components/PreviewModal.ts
var import_obsidian6 = __toModule(require("obsidian"));
var SCROLL_AMOUNT = 20;
var PreviewModal = class extends import_obsidian6.Modal {
  constructor(app, plugin, file) {
    super(app);
    this.plugin = plugin;
    this.file = file;
    this.leaf = new import_obsidian6.WorkspaceLeaf(app);
  }
  onOpen() {
    var _a;
    this.renderPreview();
    (_a = this.plugin.controller) == null ? void 0 : _a.togglePreviewModalShown(true);
    this.scope.register(["Ctrl"], " ", () => {
      this.shouldRestoreSelection = true;
      this.close();
    });
    this.scope.register(["Ctrl"], "Enter", () => {
      var _a2, _b;
      (_a2 = this.plugin.controller) == null ? void 0 : _a2.open();
      (_b = this.plugin.controller) == null ? void 0 : _b.exit();
      this.shouldRestoreSelection = false;
      this.close();
    });
    this.scope.register(["Ctrl", "Shift"], "Enter", () => {
      var _a2, _b, _c;
      (_b = this.plugin.controller) == null ? void 0 : _b.open((_a2 = this.plugin.settings) == null ? void 0 : _a2.splitDirection);
      (_c = this.plugin.controller) == null ? void 0 : _c.exit();
      this.shouldRestoreSelection = false;
      this.close();
    });
    this.scope.register([], " ", () => {
      this.scroll("down");
    });
    this.scope.register(["Shift"], " ", () => {
      this.scroll("up");
    });
    this.scope.register([], "ArrowDown", () => {
      this.scroll("down", SCROLL_AMOUNT);
    });
    this.scope.register(["Ctrl"], "n", () => {
      this.scroll("down", SCROLL_AMOUNT);
    });
    this.scope.register([], "ArrowUp", () => {
      this.scroll("up", SCROLL_AMOUNT);
    });
    this.scope.register(["Ctrl"], "p", () => {
      this.scroll("up", SCROLL_AMOUNT);
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    this.detachLater(INTERVAL_MILLISECOND_TO_BE_DETACHED);
    setTimeout(() => {
      var _a;
      (_a = this.plugin.controller) == null ? void 0 : _a.togglePreviewModalShown(false);
    }, 100);
  }
  detachLater(millisecond) {
    if (!this.leaf) {
      return;
    }
    const leafToBeDetached = this.leaf;
    setTimeout(() => {
      leafToBeDetached.detach();
    }, millisecond);
  }
  scroll(direction, px) {
    const { containerEl, contentEl } = this;
    const move = (px != null ? px : containerEl.clientHeight / 2) * (direction === "up" ? -1 : 1);
    contentEl.scrollBy({
      top: move,
      behavior: "smooth"
    });
  }
  renderPreview() {
    const { contentEl, containerEl } = this;
    contentEl.empty();
    containerEl.addClass("core-search-assistant_preview-modal-container");
    this.leaf.openFile(this.file, { state: { mode: "preview" } });
    contentEl.appendChild(this.leaf.containerEl);
  }
};

// src/Controller.ts
var DELAY_TO_RELOAD_IN_MILLISECOND = 1e3;
var Controller = class extends import_obsidian7.Component {
  constructor(app, plugin) {
    super();
    this.app = app;
    this.plugin = plugin;
    this.events = new CoreSearchAssistantEvents();
    this.outlineEl = this.createOutline();
    this.countSearchItemDetected = 0;
    this.inSearchMode = false;
    this.previewModalShown = false;
    this.optionModalShown = false;
  }
  onunload() {
    this.outlineEl.empty();
    this.outlineEl.remove();
    if (this.scope) {
      this.app.keymap.popScope(this.scope);
      this.scope = void 0;
    }
  }
  onload() {
    this.registerEvent(this.events.on(EVENT_SEARCH_RESULT_ITEM_DETECTED, () => {
      var _a, _b;
      console.log("search result detected");
      if (((_a = this.plugin.settings) == null ? void 0 : _a.autoPreviewMode) !== "cardView") {
        return;
      }
      const cardsPerPage = this.cardsPerPage();
      if (cardsPerPage === void 0) {
        return;
      }
      if (this.countSearchItemDetected >= cardsPerPage) {
        return;
      }
      if (this.countSearchItemDetected === 0) {
        (_b = this.plugin.cardView) == null ? void 0 : _b.hide();
      }
      this.showCardViewItem(this.countSearchItemDetected);
      if (this.countSearchItemDetected === 0) {
        this.retryCardView(DELAY_TO_RELOAD_IN_MILLISECOND);
      }
      this.countSearchItemDetected++;
    }));
    this.app.workspace.onLayoutReady(() => {
      var _a;
      const inputEl = (_a = this.plugin.SearchComponentInterface) == null ? void 0 : _a.getSearchInput();
      if (!inputEl) {
        console.log("[Core Search Assistant] input form not found");
        return;
      }
      this.registerDomEvent(document, "click", () => {
        if (this.optionModalShown || this.previewModalShown) {
          return;
        }
        this.exit();
      });
      this.registerDomEvent(inputEl, "click", (evt) => {
        evt.stopPropagation();
        if (!this.inSearchMode) {
          this.enter();
        }
      });
      this.registerDomEvent(inputEl, "input", () => {
        if (!this.inSearchMode) {
          this.enter();
        }
        this.reset();
      });
      this.registerDomEvent(inputEl, "keypress", (evt) => {
        if (evt.key !== "Enter") {
          return;
        }
        if (!this.inSearchMode) {
          this.enter();
        }
        this.reset();
      });
      this.registerDomEvent(inputEl, "focus", () => {
        if (!this.inSearchMode) {
          this.enter();
        }
      });
    });
    console.log("[Core Search Assistant] Controller loaded");
  }
  enter() {
    var _a, _b;
    if (!this.scope) {
      this.scope = new import_obsidian7.Scope();
    }
    this.app.keymap.pushScope(this.scope);
    this.scope.register(["Ctrl"], "N", (evt) => {
      evt.preventDefault();
      this.navigateForward();
      this.showWorkspacePreview();
      console.log("\u2193");
    });
    this.scope.register([], "ArrowDown", (evt) => {
      evt.preventDefault();
      this.navigateForward();
      this.showWorkspacePreview();
      console.log("\u2193");
    });
    this.scope.register(["Ctrl"], "P", (evt) => {
      evt.preventDefault();
      this.navigateBack();
      this.showWorkspacePreview();
      console.log("\u2191");
    });
    this.scope.register([], "ArrowUp", (evt) => {
      evt.preventDefault();
      this.navigateBack();
      this.showWorkspacePreview();
      console.log("\u2191");
    });
    this.scope.register(["Ctrl"], "Enter", (evt) => {
      evt.preventDefault();
      this.open();
      this.exit();
    });
    this.scope.register(["Ctrl", "Shift"], "Enter", (evt) => {
      var _a2;
      evt.preventDefault();
      this.open((_a2 = this.plugin.settings) == null ? void 0 : _a2.splitDirection);
      this.exit();
    });
    this.scope.register(["Ctrl"], " ", () => {
      this.openPreviewModal();
    });
    this.scope.register(["Shift"], " ", () => {
      new OptionModal(this.app, this.plugin).open();
    });
    this.scope.register([], "Escape", () => {
      this.exit();
    });
    if (((_a = this.plugin.settings) == null ? void 0 : _a.autoPreviewMode) === "cardView") {
      (_b = this.plugin.SearchComponentInterface) == null ? void 0 : _b.startWatching(this.events);
    }
    this.showOutline();
    this.inSearchMode = true;
    console.log("[Core Search Assistant] Enter search mode");
  }
  reset() {
    var _a;
    this.forget();
    this.unfocus();
    (_a = this.plugin.cardView) == null ? void 0 : _a.hide();
    this.countSearchItemDetected = 0;
    console.log("[Core Search Assistant] Reset search mode");
  }
  exit() {
    var _a, _b, _c, _d;
    if (this.scope) {
      this.app.keymap.popScope(this.scope);
      this.scope = void 0;
    }
    this.unfocus();
    (_b = (_a = this.plugin) == null ? void 0 : _a.workspacePreview) == null ? void 0 : _b.hide();
    (_c = this.plugin.cardView) == null ? void 0 : _c.hide();
    this.countSearchItemDetected = 0;
    (_d = this.plugin.SearchComponentInterface) == null ? void 0 : _d.stopWatching();
    this.outlineEl.hide();
    this.inSearchMode = false;
    console.log("[Core Search Assistant] Exit search mode");
  }
  focus() {
    var _a, _b;
    if (this.currentFocusId === void 0) {
      return;
    }
    (_a = this.plugin.SearchComponentInterface) == null ? void 0 : _a.focusOn(this.currentFocusId);
    const pos = this.positionInCardView(this.currentFocusId);
    if (pos === void 0) {
      return;
    }
    (_b = this.plugin.cardView) == null ? void 0 : _b.focusOn(pos);
  }
  open(direction) {
    var _a;
    if (this.currentFocusId === void 0) {
      return;
    }
    (_a = this.plugin.SearchComponentInterface) == null ? void 0 : _a.open(this.currentFocusId, direction);
  }
  renewCardViewPage() {
    var _a, _b, _c, _d, _e;
    if (((_a = this.plugin.settings) == null ? void 0 : _a.autoPreviewMode) !== "cardView") {
      return;
    }
    (_b = this.plugin.cardView) == null ? void 0 : _b.hide();
    (_d = this.plugin.cardView) == null ? void 0 : _d.renderPage((_c = this.currentFocusId) != null ? _c : 0);
    (_e = this.plugin.cardView) == null ? void 0 : _e.reveal();
  }
  toggleOptionModalShown(shown) {
    this.optionModalShown = shown;
  }
  togglePreviewModalShown(shown) {
    this.previewModalShown = shown;
  }
  forget() {
    this.currentFocusId = void 0;
    this.countSearchItemDetected = 0;
  }
  showCardViewItem(id) {
    var _a, _b, _c, _d;
    const item = (_a = this.plugin.SearchComponentInterface) == null ? void 0 : _a.getResultItemAt(id);
    if (!item) {
      return;
    }
    (_b = this.plugin.cardView) == null ? void 0 : _b.renderItem(item, id);
    (_c = this.plugin.cardView) == null ? void 0 : _c.setLayout();
    (_d = this.plugin.cardView) == null ? void 0 : _d.reveal();
  }
  showWorkspacePreview() {
    var _a, _b, _c, _d, _e;
    if (((_a = this.plugin.settings) == null ? void 0 : _a.autoPreviewMode) !== "singleView") {
      return;
    }
    const item = (_c = this.plugin.SearchComponentInterface) == null ? void 0 : _c.getResultItemAt((_b = this.currentFocusId) != null ? _b : 0);
    if (!item) {
      return;
    }
    (_e = (_d = this.plugin) == null ? void 0 : _d.workspacePreview) == null ? void 0 : _e.renew(item.file);
  }
  navigateForward() {
    var _a, _b;
    if (this.currentFocusId === void 0) {
      this.currentFocusId = 0;
    } else {
      const numResults = (_b = (_a = this.plugin.SearchComponentInterface) == null ? void 0 : _a.count()) != null ? _b : 0;
      this.currentFocusId++;
      this.currentFocusId = this.currentFocusId < numResults ? this.currentFocusId : numResults - 1;
      if (this.shouldTransitNextPageInCardView()) {
        this.renewCardViewPage();
      }
    }
    this.focus();
  }
  navigateBack() {
    if (this.currentFocusId === void 0) {
      return;
    }
    this.currentFocusId--;
    this.currentFocusId = this.currentFocusId >= 0 ? this.currentFocusId : 0;
    if (this.shouldTransitPreviousPageInCardView()) {
      this.renewCardViewPage();
    }
    this.focus();
  }
  unfocus() {
    var _a, _b;
    (_a = this.plugin.SearchComponentInterface) == null ? void 0 : _a.unfocus();
    (_b = this.plugin.cardView) == null ? void 0 : _b.unfocus();
  }
  openPreviewModal() {
    var _a;
    const { currentFocusId } = this;
    if (currentFocusId === void 0) {
      return;
    }
    const item = (_a = this.plugin.SearchComponentInterface) == null ? void 0 : _a.getResultItemAt(currentFocusId);
    if (!item) {
      return;
    }
    new PreviewModal(this.app, this.plugin, item.file).open();
  }
  createOutline() {
    const outlineEl = document.body.createEl("div", {
      cls: "core-search-assistant_search-mode-outline"
    });
    outlineEl.hide();
    return outlineEl;
  }
  showOutline() {
    var _a;
    const outlineWidth = validOutlineWidth((_a = this.plugin.settings) == null ? void 0 : _a.outlineWidth);
    this.outlineEl.style.outline = `${outlineWidth}px solid var(--interactive-accent)`;
    this.outlineEl.style.outlineOffset = `-${outlineWidth}px`;
    this.outlineEl.show();
  }
  shouldTransitNextPageInCardView() {
    if (!this.plugin.settings) {
      return false;
    }
    const [row, column] = parseCardLayout(this.plugin.settings.cardViewLayout);
    const cardsPerPage = row * column;
    if (this.currentFocusId === void 0) {
      return false;
    }
    return this.currentFocusId % cardsPerPage === 0;
  }
  shouldTransitPreviousPageInCardView() {
    if (!this.plugin.settings) {
      return false;
    }
    const [row, column] = parseCardLayout(this.plugin.settings.cardViewLayout);
    const cardsPerPage = row * column;
    if (this.currentFocusId === void 0) {
      return false;
    }
    return (this.currentFocusId + 1) % cardsPerPage === 0;
  }
  positionInCardView(id) {
    if (id === void 0) {
      return void 0;
    }
    const cardsPerPage = this.cardsPerPage();
    if (!cardsPerPage) {
      return void 0;
    }
    return id % cardsPerPage;
  }
  cardsPerPage() {
    if (!this.plugin.settings) {
      return void 0;
    }
    const [row, column] = parseCardLayout(this.plugin.settings.cardViewLayout);
    return row * column;
  }
  retryCardView(delayMillisecond) {
    setTimeout(() => {
      var _a;
      if (!((_a = this.plugin.cardView) == null ? void 0 : _a.itemsRenderedCorrectly())) {
        this.reset();
        this.renewCardViewPage();
      }
    }, delayMillisecond);
  }
};

// src/SearchComponentInterface.ts
var import_obsidian9 = __toModule(require("obsidian"));

// src/types/Guards.ts
var import_obsidian8 = __toModule(require("obsidian"));
var SORT_ORDER_IN_SEARCH = [
  "alphabeticalReverse",
  "alphabetical",
  "byModifiedTime",
  "byModifiedTimeReverse",
  "byCreatedTime",
  "byCreatedTimeReverse"
];
function isSearchView(view) {
  if (typeof view !== "object") {
    return false;
  }
  if (view === null) {
    return false;
  }
  const {
    matchingCase,
    explainSearch,
    dom,
    setCollapseAll,
    setExplainSearch,
    setExtraContext,
    setMatchingCase,
    setSortOrder,
    searchInfoEl,
    searchComponent,
    headerDom
  } = view;
  if (typeof matchingCase !== "boolean") {
    return false;
  }
  if (typeof explainSearch !== "boolean") {
    return false;
  }
  if (!isSearchDom(dom)) {
    return false;
  }
  if (typeof searchComponent !== "object") {
    return false;
  }
  if (typeof searchInfoEl !== "object") {
    return false;
  }
  if (!(searchInfoEl instanceof HTMLDivElement)) {
    return false;
  }
  if (!isSearchHeaderDom(headerDom)) {
    return false;
  }
  if (!(setCollapseAll instanceof Function)) {
    return false;
  }
  if (!(setExplainSearch instanceof Function)) {
    return false;
  }
  if (!(setExtraContext instanceof Function)) {
    return false;
  }
  if (!(setMatchingCase instanceof Function)) {
    return false;
  }
  if (!(setSortOrder instanceof Function)) {
    return false;
  }
  return true;
}
function isSearchDom(obj) {
  if (typeof obj !== "object") {
    return false;
  }
  if (obj === null) {
    return false;
  }
  const { extraContext, collapseAll, sortOrder, children, childrenEl } = obj;
  if (typeof extraContext !== "boolean") {
    return false;
  }
  if (typeof collapseAll !== "boolean") {
    return false;
  }
  if (typeof sortOrder !== "string") {
    return false;
  }
  if (!SORT_ORDER_IN_SEARCH.includes(sortOrder)) {
    return false;
  }
  if (typeof children !== "object") {
    return false;
  }
  if (!(children instanceof Array)) {
    return false;
  }
  for (const child of children) {
    if (!isSearchResultItem(child)) {
      return false;
    }
  }
  if (typeof childrenEl !== "object") {
    return false;
  }
  if (!(childrenEl instanceof HTMLElement)) {
    return false;
  }
  return true;
}
function isSearchResultItem(obj) {
  if (typeof obj !== "object" || obj === null) {
    return false;
  }
  const { file, containerEl } = obj;
  if (!(file instanceof import_obsidian8.TFile)) {
    return false;
  }
  if (!(containerEl instanceof HTMLElement)) {
    return false;
  }
  return true;
}
function isSearchHeaderDom(obj) {
  if (typeof obj !== "object" || obj === null) {
    return false;
  }
  const { navButtonsEl } = obj;
  if (typeof navButtonsEl !== "object") {
    return false;
  }
  if (!(navButtonsEl instanceof HTMLDivElement)) {
    return false;
  }
  return true;
}

// src/utils/LinkedList.ts
var LinkedList = class {
  constructor(events, eventId) {
    this.unlinkedPool = new Map();
    this.events = events;
    this.eventId = eventId;
  }
  structure(cur, pre) {
    let linked = false;
    if (pre === void 0) {
      this.setRoot(cur);
      linked = true;
      this.signal();
    } else if (this.tail !== void 0 && pre === this.tail.entity) {
      this.link(cur);
      linked = true;
      this.unlinkedPool.delete(cur);
      this.signal();
    }
    if (linked) {
      if (!this.unlinkedPool.has(cur)) {
        return;
      }
      const next = this.unlinkedPool.get(cur);
      if (next === void 0) {
        return;
      }
      this.structure(next, cur);
    } else {
      if (pre) {
        this.unlinkedPool.set(pre, cur);
      }
    }
  }
  setRoot(entity) {
    const rootNode = {
      entity,
      pre: void 0,
      next: void 0
    };
    this.head = rootNode;
    this.tail = rootNode;
  }
  link(cur) {
    if (!this.tail) {
      return;
    }
    const currentTail = this.tail;
    currentTail.next = {
      entity: cur,
      pre: currentTail,
      next: void 0
    };
    this.tail = currentTail.next;
  }
  clean() {
    this.head = void 0;
    this.tail = void 0;
    this.unlinkedPool = new Map();
  }
  signal() {
    this.events.trigger(this.eventId);
  }
};

// src/SearchComponentInterface.ts
var SearchComponentInterface = class extends import_obsidian9.Component {
  constructor(app, plugin) {
    super();
    this.observationConfig = {
      childList: true
    };
    this.onObservedCallback = (mutations, _observer) => __async(this, null, function* () {
      for (const mutation of mutations) {
        if (mutation.addedNodes.length === 0) {
          continue;
        }
        const pre = mutation.previousSibling;
        if (!(pre instanceof HTMLElement)) {
          continue;
        }
        for (const node of Array.from(mutation.addedNodes)) {
          if (!(node instanceof HTMLElement)) {
            continue;
          }
          const isSearchResultItem2 = node.tagName === "DIV" && node.hasClass("tree-item") && node.hasClass("search-result");
          if (!isSearchResultItem2) {
            continue;
          }
          if (!this.linkedList) {
            return;
          }
          this.linkedList.structure(node, this.isRootSearchResult(pre) ? void 0 : pre);
        }
      }
    });
    this.app = app;
    this.plugin = plugin;
    this.observer = new MutationObserver(this.onObservedCallback.bind(this));
  }
  onload() {
    this.app.workspace.onLayoutReady(() => {
      this.renewSortOrderInfo();
      this.registerDomEvent(document, "click", () => {
        this.renewSortOrderInfo();
      });
    });
    console.log("[Core Search Assistant] Search Component Interface loaded");
  }
  onunload() {
    var _a, _b;
    (_a = this.sortOrderContainerEl) == null ? void 0 : _a.empty();
    (_b = this.sortOrderContainerEl) == null ? void 0 : _b.remove();
    this.observer.disconnect();
  }
  toggleMatchingCase() {
    const view = this.getSearchView();
    view == null ? void 0 : view.setMatchingCase(!view.matchingCase);
  }
  toggleExplainSearch() {
    const view = this.getSearchView();
    view == null ? void 0 : view.setExplainSearch(!view.explainSearch);
  }
  toggleCollapseAll() {
    const view = this.getSearchView();
    view == null ? void 0 : view.setCollapseAll(!view.dom.collapseAll);
  }
  toggleExtraContext() {
    const view = this.getSearchView();
    view == null ? void 0 : view.setExtraContext(!view.dom.extraContext);
  }
  setSortOrder(sortOrder) {
    const view = this.getSearchView();
    const originalOrder = view == null ? void 0 : view.dom.sortOrder;
    view == null ? void 0 : view.setSortOrder(sortOrder);
    return sortOrder !== originalOrder;
  }
  focusOn(pos) {
    var _a;
    this.unfocus();
    const item = this.getResultItemAt(pos);
    if (!item) {
      return;
    }
    item.containerEl.addClass("core-search-assistant_search-result-items-focus");
    item.containerEl.scrollIntoView(((_a = this.plugin.settings) == null ? void 0 : _a.keepSelectedItemsCentered) ? { block: "center" } : { block: "nearest" });
  }
  unfocus() {
    const items = this.getResultItems();
    items.forEach((item) => {
      item.containerEl.removeClass("core-search-assistant_search-result-items-focus");
    });
  }
  open(pos, direction) {
    const item = this.getResultItemAt(pos);
    if (!item) {
      return;
    }
    const { file } = item;
    const leaf = direction === void 0 ? this.app.workspace.getMostRecentLeaf() : this.app.workspace.splitActiveLeaf(direction);
    leaf.openFile(file);
    this.app.workspace.setActiveLeaf(leaf, true, true);
  }
  renewSortOrderInfo() {
    if (!this.sortOrderContainerEl) {
      this.createSortOrderEls();
    }
    const view = this.getSearchView();
    if (!view) {
      return;
    }
    const sortOrder = view.dom.sortOrder;
    if (!this.sortOrderContentEl) {
      return;
    }
    this.sortOrderContentEl.textContent = searchOptions[sortOrder].description;
  }
  count() {
    var _a;
    const results = (_a = this.getSearchView()) == null ? void 0 : _a.dom.children;
    if (!results) {
      return 0;
    }
    return results.length;
  }
  getResultItems() {
    var _a, _b;
    return (_b = (_a = this.getSearchView()) == null ? void 0 : _a.dom.children) != null ? _b : [];
  }
  getResultItemAt(pos) {
    var _a;
    return (_a = this.getSearchView()) == null ? void 0 : _a.dom.children[pos];
  }
  getSearchInput() {
    var _a;
    return (_a = this.getSearchView()) == null ? void 0 : _a.searchComponent.inputEl;
  }
  startWatching(events) {
    var _a, _b;
    this.linkedList = new LinkedList(events, EVENT_SEARCH_RESULT_ITEM_DETECTED);
    const childrenContainerEl = (_b = (_a = this.plugin.SearchComponentInterface) == null ? void 0 : _a.getSearchView()) == null ? void 0 : _b.dom.childrenEl;
    this.observer.observe(childrenContainerEl, this.observationConfig);
  }
  stopWatching() {
    this.observer.disconnect();
  }
  createSortOrderEls() {
    this.sortOrderContainerEl = createEl("div", {
      cls: "search-info-container"
    });
    this.sortOrderContentEl = this.sortOrderContainerEl.createEl("div");
    const view = this.getSearchView();
    if (!view) {
      return void 0;
    }
    this.sortOrderContainerEl.insertAfter(view.searchInfoEl);
  }
  getSearchView() {
    const leaf = this.getSearchLeaf();
    if (!leaf) {
      return void 0;
    }
    const view = leaf.view;
    return isSearchView(view) ? view : void 0;
  }
  getSearchLeaf() {
    var _a;
    const sideDock = this.app.workspace.leftSplit;
    if (!(sideDock instanceof import_obsidian9.WorkspaceSidedock)) {
      return void 0;
    }
    const leafs = (_a = sideDock.children[0]) == null ? void 0 : _a.children;
    return leafs.find((leaf) => {
      return leaf.view.getViewType() === "search";
    });
  }
  isRootSearchResult(el) {
    return el.tagName === "DIV" && !el.hasClass("tree-item") && !el.hasClass("search-result");
  }
};

// src/main.ts
var import_obsidian10 = __toModule(require("obsidian"));
var CoreSearchAssistantPlugin = class extends import_obsidian10.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.controller = new Controller(this.app, this);
      this.addChild(this.controller);
      this.SearchComponentInterface = new SearchComponentInterface(this.app, this);
      this.addChild(this.SearchComponentInterface);
      this.workspacePreview = new WorkspacePreview(this.app, this);
      this.addChild(this.workspacePreview);
      this.cardView = new CardView(this.app, this);
      this.addChild(this.cardView);
      yield this.loadSettings();
      this.addSettingTab(new CoreSearchAssistantSettingTab(this.app, this));
      console.log("[Core Search Assistant] plugin loaded");
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
